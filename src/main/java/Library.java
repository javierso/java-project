/*
 * This Java source file was auto generated by running 'gradle buildInit --type java-library'
 * by 'jsanchez' at '5/29/18 2:25 PM' with Gradle 2.10
 *
 * @author jsanchez, @date 5/29/18 2:25 PM
 */
import java.util.ArrayList;
import java.io.BufferedReader;
import java.io.IOException;
import java.util.HashMap;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import java.lang.reflect.Type;
import com.google.gson.reflect.TypeToken;
import com.google.gson.Gson;
import java.util.List;



public class Library {
    public boolean someLibraryMethod() {
        return true;
    }

    public ArrayList<String> getLines(BufferedReader input) throws IOException {
        ArrayList<String> res = new ArrayList<String>();

        try (BufferedReader br = input) {
            String line = br.readLine();

            while (line != null) {
                res.add(line);
                line = br.readLine();
            }
            
            return res;
        }


    }

    public void processVsatInfo(ArrayList<String> lines) {
        ArrayList<JsonElement> arr = new  ArrayList<JsonElement>();
        for (String line : lines) {
            String[] split =  line.split("\\s+");

            String date = split[0];
            String siteId = split[1];
            int beamId = Integer.parseInt(split[2]);
            double lng = Double.parseDouble(split[3]);
            double lat = Double.parseDouble(split[4]);
             
            JsonElement found = arr.stream()                       
                .filter(x -> x.getAsJsonObject().get("date").getAsString().equals(date))
                .findAny()                                      
                .orElse(null);

            if (found != null ) {
                JsonObject beamObj = found.getAsJsonObject().getAsJsonObject("beam");

                JsonElement beamIdFound = beamObj.stream()                       
                    .filter(x -> x.getAsJsonObject().get("beamId").getAsInt() == beamId)
                    .findAny()                                      
                    .orElse(null);

                if (beamIdFound != null) {
                    JsonArray vsats = beamIdFound.getAsJsonObject().getAsJsonArray("vsats");

                    JsonObject vsat = JsonObject();
                    vsat.addProperty("siteId", siteId);
                    vsat.addProperty("latitude", lat);
                    vsat.addProperty("longitude", lng);

                    vsats.add(vsat);
                } else {
                    //creat beam id object
                    JsonObject newBeamIdObj = JsonObject();

                    JsonArray vsats = new JsonArray(); 
                    newBeamIdObj.addProperty("beamId", beamId);
                    newBeamIdObj.addProperty("vsats", vsats);


                }


            } else {
                JsonObject obj = JsonObject();
                obj.addProperty("date", date);
                obj.addProperty("beam", new JsonArray());

            }

        }
    
    }

}
